// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id

  username           String?
  image              String?
  custom_id          String?
  group              String?
  role               String?
  employee_number    String?
  birthdate          DateTime? @db.Date
  email              String?   @unique
  is_online          Boolean?  @default(false)
  last_login         DateTime?
  organization_id    String?
  nik                String?
  status_code_tte    String?
  status_tte         String?
  status_message_tte String?
  golongan           String?
  pangkat            String?

  createdat     DateTime?      @default(now())
  updatedat     DateTime?      @updatedAt
  documents     Document[]
  histories     History[]
  Discussions   Disuccsion[]
  Notification  Notification[]
  Otp           Otp[]
  RecipientUser Recipient[]    @relation("RecipientUser")
  RejectedUser  Recipient[]    @relation("RejectedUser")
}

model Document {
  id                String         @id @default(cuid())
  filename          String?
  original_filename String?
  status            String?
  workflow          String?
  size              Int?
  initial_document  String?
  document_pages    Int?
  user_id           String?
  uploader          User?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type              String?
  sign_document     String?
  ongoing_document  String?
  upload_date       DateTime?      @default(now())
  can_discuss       Boolean?       @default(false)
  expired_at        DateTime?
  histories         History[]
  created_at        DateTime?      @default(now())
  updated_at        DateTime?      @updatedAt
  Discussions       Disuccsion[]
  Notification      Notification[]
  Recipient         Recipient[]
}

model Recipient {
  id             String    @id @default(cuid())
  document_id    String?
  document       Document? @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipient_id   String?
  recipient_json Json?
  // status dari dokumen jadi ndak perlu ke documen table
  status         String?
  recipient_user User?     @relation(name: "RecipientUser", fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  sign_properties  Json?
  sequence         Int?      @default(0)
  role             String?
  // signatory status digunakan untuk menandakan apakah user sudah menandatangani atau belum
  signatory_status String?
  is_owner         Boolean?  @default(false)
  approval_date    DateTime?
  rejected_json    Json?
  rejected_id      String?
  rejected_user    User?     @relation(name: "RejectedUser", fields: [rejected_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reason          String?
  rejected_reason String?
  uploader_id     String?

  rejected_at DateTime?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
}

model History {
  id          String    @id @default(cuid())
  document_id String?
  document    Document? @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     String?
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ip_address  String?
  useragent   String?
  country     String?
  city        String?
  lattitude   String?
  longitude   String?
  type        String?
  action      String?
  activity    String?
  information String?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
}

// kurang parent id
model Disuccsion {
  id          String    @id @default(cuid())
  document_id String?
  document    Document? @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     String?
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  message     String?
  parent_id   String?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
}

model Notification {
  id          String    @id @default(cuid())
  user_id     String?
  document_id String?
  message     String?
  is_read     Boolean?  @default(false)
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  document    Document? @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Otp {
  id         String    @id @default(cuid())
  user_id    String?
  secret     String?
  expired_at DateTime?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
